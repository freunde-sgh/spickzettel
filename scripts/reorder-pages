#!/usr/bin/env python
from __future__ import print_function
import copy, sys
from pyPdf import PdfFileWriter, PdfFileReader

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

# the real page number as it is shown in the input doc
# We start from -1 because while #1 is the first page with a number,
# but there are two cover pages before it.
indices_25 = [ 28, 13, 14, 27, 22, 19, 6, 35, 40, 1, 32, 9, 0, 41, 38, 3, 4, 37,
            36, 5, 2, 39, 30, 11, 20, 21, 10, 31, 34, 7, 24, 17, 18, 23, 8,
            33, -1, 42, 26, 15, 16, 25, 12, 29 ]

indices_26 = [ 42, 19, 56, 5, 40, 21, 20, 41, 26, 35, 22, 39, 12, 49, 36, 25, 58, 3,
            18, 43, 50, 11, 38, 23, 44, 17, 24, 37, 30, 31, 52, 9, 16, 45, 46, 15,
            10, 51, 54, 7, 14, 47, 8, 53, 32, 29, 28, 33, 48, 13, 6, 55, 34, 27,
            0, 61, -1, 62, 2, 59, 60, 1, 4, 57 ]

indices = [ 30, 15, 20, 25, 10, 2, 0, 45, 4, 41, 36, 9, 26, 19, 42, 3, -1, 44, 24,
           21, 34, 11, 40, 5, 6, 46, 18, 27, 14, 31, 12, 33, 38, 7, 28, 17, 22, 23,
           32, 13, 16, 29, 8, 37, 39, 1, 35, 43 ]

input = PdfFileReader(sys.stdin)
output = PdfFileWriter()

for i in range(-1, len(indices) - 1):
    page_number = indices.index(i)
    eprint("Adding old page %d as new #%d" % (page_number, i + 2))

    try:
        output.addPage(input.getPage(page_number))
    except IndexError:
        eprint("Could not find page %d" % (page_number))

output.write(sys.stdout)
